{"version":3,"sources":["components/partials/ButtonWithLoading.js","utils/setAuthToken.js","actions/authActions.js","actions/types.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/userReducer.js","reducers/index.js","store.js","components/layouts/ScrollToTop.js","actions/errorActions.js","components/layouts/Navbar.js","components/partials/Button.js","components/partials/Loading.js","components/pages/Landing.js","components/errors/PageNotFound.js","App.js","serviceWorker.js","index.js"],"names":["Component","setAuthToken","token","axios","defaults","headers","common","setCurrentUser","decoded","type","payload","setAuthLoading","status","setMessage","message","isEmpty","require","initialState","isAuthenticated","user","isLoading","dashboard","usersList","authoritiesList","groupsList","subAdminsList","profile","details","history","combineReducers","auth","state","action","errors","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","ScrollToTop","prevProps","this","props","location","pathname","scrollTo","dispatch","React","withRouter","Navbar","isTop","isScrollOnTop","bind","scrollY","setState","addEventListener","removeEventListener","initialBg","scrolledBg","expandedBg","brandColor","className","classnames","expanded","role","to","children","Button","onClick","style","disabled","others","Loading","loadingText","ButtonWithLoading","rest","propTypes","PropTypes","bool","isRequired","string","Landing","onChange","e","fields","target","id","value","onSubmit","preventDefault","validateForm","sendInquiry","render","name","email","subject","rows","i","push","map","row","key","flex","noValidate","htmlFor","error","placeholder","split","item","nextProps","formIsValid","Object","keys","forEach","index","connect","userData","post","then","res","console","log","data","catch","err","response","PageNotFound","goBack","height","localStorage","jwtToken","exp","jwt_decode","JSON","parse","Date","now","removeItem","href","App","exact","path","component","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gMAMqBA,E,yHCMNC,EAVM,SAAAC,GACbA,EAEAC,IAAMC,SAASC,QAAQC,OAAvB,cAAiD,UAAYJ,SAGtDC,IAAMC,SAASC,QAAQC,OAAvB,e,QC2HFC,EAAiB,SAAAC,GAC1B,MAAO,CACHC,KChIwB,mBDiIxBC,QAASF,IAKJG,EAAiB,SAAAC,GAC1B,MAAO,CACHH,KCzIoB,eD0IpBC,QAASE,IAKJC,EAAa,SAAAC,GACtB,MAAO,CACHL,KC/ImB,cDgJnBC,QAASI,I,+BEhJXC,EAAUC,EAAQ,IAElBC,EAAe,CACjBC,iBAAiB,EACjBC,KAAM,GACNC,WAAW,EACXN,QAAS,ICVPG,EAAe,GCUfA,EAAe,CACjBG,WAAkB,EAClBC,UAAkB,GAClBC,UAAkB,GAClBC,gBAAkB,GAClBC,WAAkB,GAClBC,cAAkB,GAClBC,QAAkB,GAClBC,QAAkB,GAClBC,QAAkB,IChBPC,cAAgB,CAC3BC,KHSW,WAAwC,IAA/BC,EAA8B,uDAAtBd,EAAce,EAAQ,uCAClD,OAAQA,EAAOvB,MACX,IDZwB,mBCapB,OAAO,2BACAsB,GADP,IAEIb,iBAAkBH,EAAQiB,EAAOtB,SACjCS,KAAMa,EAAOtB,UAGrB,IDpBoB,eCqBhB,OAAO,2BACAqB,GADP,IAEIX,UAAWY,EAAOtB,UAE1B,IDvBmB,cCwBf,OAAO,2BACAqB,GADP,IAEIjB,QAASkB,EAAOtB,QAChBU,WAAW,IAEnB,QACI,OAAOW,IG7BfE,OFHW,WAAwC,IAA/BF,EAA8B,uDAAtBd,EAAce,EAAQ,uCAClD,OAAQA,EAAOvB,MACX,IFLkB,aEqBd,OAAOuB,EAAOtB,QAElB,QACI,OAAOqB,IEjBfZ,KDgBW,WAAwC,IAA/BY,EAA8B,uDAAtBd,EAAce,EAAQ,uCAClD,OAAQA,EAAOvB,MACX,IHfsB,iBGgBlB,OAAO,2BACAsB,GADP,IAEIV,UAAWW,EAAOtB,QAClBU,WAAW,IAEnB,IHtBwB,mBGuBpB,OAAO,2BACAW,GADP,IAEIL,QAASM,EAAOtB,QAChBU,WAAW,IAEnB,IHtBwB,mBGuBpB,OAAO,2BACAW,GADP,IAEIJ,QAASK,EAAOtB,QAChBU,WAAW,IAEnB,IH3BwB,mBG4BpB,OAAO,2BACAW,GADP,IAEIH,QAASI,EAAOtB,QAChBU,WAAW,IAEnB,IHtCqB,gBGuCjB,OAAO,2BACAW,GADP,IAEIT,UAAU,eAAKU,EAAOtB,SACtBU,WAAW,IAEnB,IH3C2B,sBG4CvB,OAAO,2BACAW,GADP,IAEIR,gBAAgB,eAAKS,EAAOtB,SAC5BU,WAAW,IAEnB,IHhDsB,iBGiDlB,OAAO,2BACAW,GADP,IAEIP,WAAW,eAAKQ,EAAOtB,SACvBU,WAAW,IAEnB,IHrD0B,qBGsDtB,OAAO,2BACAW,GADP,IAEIN,cAAc,eAAKO,EAAOtB,SAC1BU,WAAW,IAEnB,IHjEoB,eGkEhB,OAAO,2BACAW,GADP,IAEIX,UAAWY,EAAOtB,UAE1B,QACI,OAAOqB,ME1EbG,EAAa,CAACC,KAYLC,EAVDC,YACVC,EALiB,GAOjBC,YACIC,IAAe,WAAf,EAAmBN,GAElBO,OAAOC,sCAAwCD,OAAOC,wCAA2CH,MCTpGI,G,uLAEiBC,GCDE,IAAAX,EDGbY,KAAKC,MAAMC,SAASC,WAAaJ,EAAUG,SAASC,WAEpDP,OAAOQ,SAAS,EAAG,GACnBb,EAAMc,UCNOjB,EDMY,GCNF,SAAAiB,GAE/BA,EAAS,CACLzC,KPRkB,aOSlBC,QAASuB,U,+BDOT,OAAO,S,GAZWkB,IAAMnD,YAgBjBoD,cAAWT,G,yBEiDXU,E,kDA7DX,aAAe,IAAD,8BACV,gBACKtB,MAAQ,CACTuB,OAAO,GAGX,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBANX,E,4DAUV,IAAMF,EAAQb,OAAOgB,QAAU,GAE3BH,IAAUT,KAAKd,MAAMuB,OACrBT,KAAKa,SAAS,CAAEJ,Y,0CAMpBb,OAAOkB,iBAAiB,SAAUd,KAAKU,iB,6CAIvCd,OAAOmB,oBAAoB,SAAUf,KAAKU,iB,+BAI1C,IAAIM,EAAahB,KAAKC,MAAMe,WAAc,iBACtCC,EAAajB,KAAKC,MAAMgB,YAAc,6BACtCC,EAAalB,KAAKC,MAAMiB,YAAc,0BACtCC,EAAanB,KAAKC,MAAMkB,YAAc,aAE1C,OACI,yBAAKC,UAAWC,IAAW,mDAAoD,CACvE,CAACL,IAAahB,KAAKC,MAAMqB,UAAYtB,KAAKd,MAAMuB,MAChD,CAACQ,IAAcjB,KAAKC,MAAMqB,WAAatB,KAAKd,MAAMuB,MAClD,CAACS,GAAalB,KAAKC,MAAMqB,WAG7BC,KAAK,cAEL,yBAAKH,UAAU,kBACX,kBAAC,IAAD,CACII,GAAG,IACHJ,UAAS,uBAAkBD,KAU9BnB,KAAKC,MAAMwB,e,GAvDXtE,a,iBCgBNuE,EArBA,SAAC,GAAkG,IAAhGC,EAA+F,EAA/FA,QAA+F,IAAtFP,iBAAsF,MAA1E,gBAA0E,EAAzDQ,EAAyD,EAAzDA,MAAOhE,EAAkD,EAAlDA,KAAM6D,EAA4C,EAA5CA,SAA4C,IAAlCI,gBAAkC,SAAbC,EAAa,4EAC7G,OACI,0CACIH,QAASA,EACTP,UAAWA,EACXQ,MAAOA,EACPhE,KAAMA,EACNiE,SAAUA,GACNC,GAEHL,ICKEM,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAH,OACZ,6BAGKA,GAAe,ebAlBC,GATe9E,EASiBuE,EATH,gBAAGnD,EAAH,EAAGA,UAAWyD,EAAd,EAAcA,YAAgBE,EAA9B,kDAC/B3D,EAEI,kBAACpB,EAAD,eAAW0E,SAAUtD,GAAe2D,GAChC,kBAAC,EAAD,CAASF,YAAaA,KAG1B,kBAAC7E,EAAc+E,KAIvBD,EAAkBE,UAAlB,aACI5D,UAAW6D,IAAUC,KAAKC,WAC1BN,YAAaI,IAAUG,QACpBb,EAAOS,WAGCF,QchBTO,E,kDACF,aAAe,IAAD,8BACV,gBAuBJC,SAAW,SAAAC,GAAM,IACPC,EAAW,EAAKzD,MAAhByD,OACNA,EAAOD,EAAEE,OAAOC,IAAMH,EAAEE,OAAOE,MAE/B,EAAKjC,SAAS,CACV8B,YA7BM,EAiCdI,SAAW,SAAAL,GACPA,EAAEM,iBAEE,EAAKC,gBACL,EAAKhD,MAAMiD,YAAY,EAAKhE,MAAMyD,SArC5B,EA6EdQ,OAAS,WAaL,IAbY,IAAD,EAUP,EAAKjE,MAVE,IAEPyD,OACIS,EAHG,EAGHA,KACAC,EAJG,EAIHA,MACAC,EALG,EAKHA,QACArF,EANG,EAMHA,QAEJM,EARO,EAQPA,UACAa,EATO,EASPA,OAGEmE,EAAO,GACJC,EAAI,EAAGA,GAAK,GAAIA,IACrBD,EAAKE,MAAMD,EAAI,GAAK,IAAM,IAAMA,GAGpC,OACI,yBAAKpC,UAAU,WACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,+CACX,6BACI,yBAAKA,UAAU,4BACX,0BAAMA,UAAU,eAAhB,aACA,0BAAMA,UAAU,kBAAhB,QAEJ,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,oBAAhB,QACA,0BAAMA,UAAU,kBAAhB,QACA,0BAAMA,UAAU,mBAAhB,YACA,0BAAMA,UAAU,kBAAhB,MACA,0BAAMA,UAAU,mBAAhB,UACA,0BAAMA,UAAU,kBAAhB,OAGJ,yBAAKA,UAAU,4BACX,uBAAGA,UAAU,2BAAb,6BACA,uBAAGA,UAAU,QACT,0BAAMA,UAAU,aAAhB,YACA,0BAAMA,UAAU,eAAhB,sBAEJ,uBAAGA,UAAU,QACT,0BAAMA,UAAU,aAAhB,YACA,0BAAMA,UAAU,eAAhB,uBAEJ,uBAAGA,UAAU,QACT,0BAAMA,UAAU,aAAhB,YACA,0BAAMA,UAAU,eAAhB,kBAEJ,uBAAGA,UAAU,QACT,0BAAMA,UAAU,aAAhB,YACA,0BAAMA,UAAU,eAAhB,sBAEJ,uBAAGA,UAAU,QACT,0BAAMA,UAAU,aAAhB,YACA,0BAAMA,UAAU,eAAhB,sBAKhB,yBAAKA,UAAU,6BACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,oDACX,yBAAKA,UAAU,yBACf,yBAAKA,UAAU,2BACf,yBAAKA,UAAU,mCAGvB,yBAAKA,UAAU,YACX,yBAAKA,UAAU,8CACX,yBAAKA,UAAU,QAEPmC,EAAKG,KAAI,SAAAC,GAAG,OAAI,uBAAGC,IAAKD,EAAKvC,UAAU,iDAAiDuC,OAGhG,yBAAKvC,UAAU,OAAOQ,MAAO,CAAEiC,KAAM,MAE5B,EAAK3E,MAAMjB,SAAkC,KAAvB,EAAKiB,MAAMjB,QAS9B,uBAAGmD,UAAU,yCAAb,SACY,6BACP,EAAKlC,MAAMjB,QAAQ,6BAFxB,WAPA,uBAAGmD,UAAU,4CAAb,SACoB,6BADpB,0BAE2B,6BAF3B,0BAG2B,6BAH3B,WAeR,0BAAM0C,YAAU,EAACf,SAAU,EAAKA,UAC5B,yBAAK3B,UAAU,mBACX,2BAAO2C,QAAQ,OAAO3C,UAAU,oCAAhC,eACA,2BACIqB,SAAU,EAAKA,SACfK,MAAOM,EACPY,MAAO5E,EAAOgE,KACdP,GAAG,OACHjF,KAAK,OACLqG,YAAY,mBACZ7C,UAAWC,IAAW,yEAA0E,CAC5F,aAAcjC,EAAOgE,KACrB,qBAAsBhE,EAAOgE,SAGpChE,EAAOgE,KAAOhE,EAAOgE,KAAKc,MAAM,MAAMR,KAAI,SAACS,EAAMX,GAAP,OAAa,0BAAMI,IAAKJ,EAAGpC,UAAU,sCAAsC+C,EAAK,iCAAiB,IAGhJ,yBAAK/C,UAAU,mBACX,2BAAO2C,QAAQ,QAAQ3C,UAAU,oCAAjC,iBACA,2BACIqB,SAAU,EAAKA,SACfK,MAAOO,EACPW,MAAO5E,EAAOiE,MACdR,GAAG,QACHjF,KAAK,QACLqG,YAAY,qBACZ7C,UAAWC,IAAW,yEAA0E,CAC5F,aAAcjC,EAAOiE,MACrB,qBAAsBjE,EAAOiE,UAGpCjE,EAAOiE,MAAQjE,EAAOiE,MAAMa,MAAM,MAAMR,KAAI,SAACS,EAAMX,GAAP,OAAa,0BAAMI,IAAKJ,EAAGpC,UAAU,sCAAsC+C,EAAK,iCAAiB,IAGlJ,yBAAK/C,UAAU,mBACX,2BAAO2C,QAAQ,UAAU3C,UAAU,oCAAnC,kBACA,2BACIqB,SAAU,EAAKA,SACfK,MAAOQ,EACPU,MAAO5E,EAAOkE,QACdT,GAAG,UACHjF,KAAK,OACLqG,YAAY,mCACZ7C,UAAWC,IAAW,yEAA0E,CAC5F,aAAcjC,EAAOkE,QACrB,qBAAsBlE,EAAOkE,YAGpClE,EAAOkE,QAAUlE,EAAOkE,QAAQY,MAAM,MAAMR,KAAI,SAACS,EAAMX,GAAP,OAAa,0BAAMI,IAAKJ,EAAGpC,UAAU,sCAAsC+C,EAAK,iCAAiB,IAGtJ,yBAAK/C,UAAU,mBACX,2BAAO2C,QAAQ,UAAU3C,UAAU,oCAAnC,kBACA,8BACIqB,SAAU,EAAKA,SACfK,MAAO7E,EACP+F,MAAO5E,EAAOnB,QACd4E,GAAG,UACHU,KAAK,IACLU,YAAY,4BACZ7C,UAAWC,IAAW,yEAA0E,CAC5F,aAAcjC,EAAOnB,QACrB,qBAAsBmB,EAAOnB,YAGpCmB,EAAOnB,QAAUmB,EAAOnB,QAAQiG,MAAM,MAAMR,KAAI,SAACS,EAAMX,GAAP,OAAa,0BAAMI,IAAKJ,EAAGpC,UAAU,sCAAsC+C,EAAK,iCAAiB,IAGtJ,yBAAK/C,UAAU,0BACX,kBAAC,EAAD,CACIxD,KAAK,SACLwD,UAAU,+FACVY,YAAY,aACZzD,UAAWA,GAJf,mBAjP5C,EAAKW,MAAQ,CACTjB,QAAS,GACTM,WAAW,EACXoE,OAAQ,CACJS,KAAM,GACNC,MAAO,GACPC,QAAS,GACTrF,QAAS,IAEbmB,OAAQ,IAXF,E,6EAemBgF,GAAY,IAAD,EACRA,EAAUnF,KAAlCV,EADgC,EAChCA,UAAWN,EADqB,EACrBA,QAEnB+B,KAAKa,SAAS,CACVtC,YACAN,c,qCAqBQ,IACN0E,EAAW3C,KAAKd,MAAhByD,OACFvD,EAAS,GACTiF,GAAc,EA8BlB,OA5BAC,OAAOC,KAAK5B,GAAQ6B,SAAQ,SAACZ,EAAKa,GAC9BrF,EAAOwE,GAAO,MAGbjB,EAAM,OACP0B,GAAc,EACdjF,EAAM,MAAY,2BAGjBuD,EAAM,QACP0B,GAAc,EACdjF,EAAM,OAAa,qCAGlBuD,EAAM,UACP0B,GAAc,EACdjF,EAAM,SAAe,8BAGpBuD,EAAM,UACP0B,GAAc,EACdjF,EAAM,SAAe,8BAGzBY,KAAKa,SAAS,CACVzB,WAGGiF,M,GA3EOlH,aAoRPuH,eALS,SAAAxF,GAAK,MAAK,CAC9BD,KAAMC,EAAMD,KACZG,OAAQF,EAAME,UAKd,CACI8D,YZpOmB,SAACyB,EAAU5F,GAAX,OAAuB,SAAAsB,GAE9CA,EAAS,CACLzC,KC5DkB,aD6DlBC,QAAS,KAGbwC,EAASvC,GAAe,IAExBR,IACKsH,KAAK,eAAgBD,GACrBE,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACZzE,EAASrC,EAAW8G,EAAIG,KAAKhH,aAEhCiH,OAAM,SAAAC,GACCA,EAAIC,UACJ/E,EAAS,CACLzC,KC3EM,aD4ENC,QAASsH,EAAIC,SAASH,OAK9B5E,EAASvC,GAAe,UYyMrB4G,CAKblC,GChQa6C,E,kDA7BX,WAAYpF,GAAQ,IAAD,8BACf,cAAMA,IACDqF,OAAS,EAAKA,OAAO3E,KAAZ,gBAFC,E,qDAMfX,KAAKC,MAAMlB,QAAQuG,W,+BAInB,OACI,yBAAKlE,UAAU,mBACX,yBAAKA,UAAU,MAAMQ,MAAO,CAAE2D,OAAQ,UAClC,yBAAKnE,UAAU,gFACX,6BACI,uBAAGA,UAAU,aAAb,OACA,8CACA,uBAAGA,UAAU,SAAb,yDAGA,4BAAQO,QAAS3B,KAAKsF,OAAQlE,UAAU,qCAAxC,mB,GArBDjE,aCgC3B,GAAIqI,aAAaC,SAAU,CAEvB,IAAMpI,EAAQmI,aAAaC,SAC3BrI,EAAaC,GAHU,IAOfqI,EAAQC,IAAWtI,GAAnBqI,IAGFpH,EAAOsH,KAAKC,MAAML,aAAalH,MACrCiB,EAAMc,SAAS3C,EAAeY,IAK1BoH,EADgBI,KAAKC,MAAQ,MAG7BxG,EAAMc,UduGkB,SAAAA,GAE5BmF,aAAaQ,WAAW,YAExB5I,GAAa,GAEbiD,EAAS3C,EAAe,Qc1GpBkC,OAAOM,SAAS+F,KAAO,W,IAmEhBC,E,uKAzDP,OACI,kBAAC,IAAD,CAAU3G,MAAOA,GACb,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,yBAAK6B,UAAU,OAEX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO+E,OAAK,EAACC,KAAM,CAAC,UAAWC,UAAW7F,KAG9C,yBAAKY,UAAU,mBACX,yBAAKA,UAAU,OAGX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO+E,OAAK,EAACC,KAAK,IAAIC,UAAW7D,IA+BjC,kBAAC,IAAD,CAAO4D,KAAK,IAAIC,UAAWhB,c,GAnD7ClI,aChDEmJ,QACW,cAA7B1G,OAAOM,SAASqG,UAEe,UAA7B3G,OAAOM,SAASqG,UAEhB3G,OAAOM,SAASqG,SAASC,MACvB,2DCZNC,IAAStD,OAAO,kBAAC,EAAD,MAASuD,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.ccf2e464.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from './Button';\nimport Loading from './Loading';\n\nconst withLoading = (Component) => ({ isLoading, loadingText, ...rest }) =>\n    isLoading\n        ?\n        <Component disabled={isLoading} {...rest}>\n            <Loading loadingText={loadingText} />\n        </Component>\n        :\n        <Component {...rest} />\n\nconst ButtonWithLoading = withLoading(Button);\n\nButtonWithLoading.propTypes = {\n    isLoading: PropTypes.bool.isRequired,\n    loadingText: PropTypes.string,\n    ...Button.propTypes\n}\n\nexport default ButtonWithLoading","import axios from 'axios';\n\nconst setAuthToken = token => {\n    if (token) {\n        // Apply authorization token to every request if logged in \n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n    } else {\n        // Delete auth header\n        delete axios.defaults.headers.common['Authorization'];\n    }\n};\n\nexport default setAuthToken;","import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\n\nimport {\n    SET_ERRORS,\n    SET_CURRENT_USER,\n    AUTH_LOADING,\n    SET_MESSAGE\n} from './types';\n\n// import Swal from 'sweetalert2'\n// import withReactContent from 'sweetalert2-react-content'\n\n// const s2rc = withReactContent(Swal); \n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n    // clear errors\n    dispatch({\n        type: SET_ERRORS,\n        payload: ''\n    });\n    \n    dispatch(setAuthLoading(true));\n\n    axios\n        .post('/users/register', userData)\n        .then(res => {\n            // push user to dashboard when they log in\n            // s2rc.fire({\n            //     title: 'Registration Successful',\n            //     icon: 'success',\n            //     // html: 'Please check your Email for the verification link',\n            //     customClass: {  \n            //         popup: 'rounded-custom',\n            //         confirmButton: 'btn btn-sub font-weight-bold rounded-custom'\n            //     }\n            // }).then(() => {\n            //     history.push('/login'); // re-direct to login on successful register\n            // })\n            \n            dispatch(setAuthLoading(false));\n        })\n        .catch(err => {\n            if (err.response) {\n                dispatch({\n                    type: SET_ERRORS,\n                    payload: err.response.data\n                    // payload: err.response.data.error.errors\n                });\n            }\n\n            dispatch(setAuthLoading(false));\n        });\n};\n\n// Register User\nexport const sendInquiry = (userData, history) => dispatch => {\n    // clear errors\n    dispatch({\n        type: SET_ERRORS,\n        payload: ''\n    });\n    \n    dispatch(setAuthLoading(true));\n\n    axios\n        .post('/api/inquiry', userData)\n        .then(res => {\n            console.log(res)\n            dispatch(setMessage(res.data.message));\n        })\n        .catch(err => {\n            if (err.response) {\n                dispatch({\n                    type: SET_ERRORS,\n                    payload: err.response.data\n                    // payload: err.response.data.error.errors\n                });\n            }\n\n            dispatch(setAuthLoading(false));\n        });\n};\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n    // clear errors\n    dispatch({\n        type: SET_ERRORS,\n        payload: ''\n    });\n\n    dispatch(setAuthLoading(true));\n\n    axios\n        .post('/api/auth/signin', userData)\n        .then(res => {\n            // Save to localStorage\n            // Set token to localStorage\n            const { token, ...user } = res.data;\n            \n             // Decode token to get user data\n            const decoded = jwt_decode(token);\n            // console.log(decoded)\n            user.role = decoded.auth;\n\n            localStorage.setItem('jwtToken', token);\n            localStorage.setItem('user', JSON.stringify(user));\n\n            // Set token to Auth header\n            setAuthToken(token);\n\n            // Set current user\n            // console.log(decoded);\n            // console.log(user);\n            dispatch(setCurrentUser(user));\n            dispatch(setAuthLoading(false));\n        })\n        .catch(err => {\n            dispatch({\n                type: SET_ERRORS,\n                payload: err.response.data\n            });\n\n            dispatch(setAuthLoading(false));\n        });\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    };\n};\n\n// Auth loading\nexport const setAuthLoading = status => {\n    return {\n        type: AUTH_LOADING,\n        payload: status\n    };\n};\n\n// Set message\nexport const setMessage = message => {\n    return {\n        type: SET_MESSAGE,\n        payload: message\n    };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n    // Remove token from local storage\n    localStorage.removeItem('jwtToken');\n    // Remove auth header for future requests\n    setAuthToken(false);\n    // Set current user to empty object {} which will set isAuthenticated to false\n    dispatch(setCurrentUser({}));\n}","// errorReducer\nexport const SET_ERRORS = 'SET_ERRORS';\n\n// authReducer\nexport const AUTH_LOADING = 'AUTH_LOADING';\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER';\nexport const SET_MESSAGE = 'SET_MESSAGE';\n\n// userReducer\nexport const USER_LOADING = 'USER_LOADING';\nexport const GET_USER_PROFILE = 'GET_USER_PROFILE';\nexport const LOAD_DASHBOARD = 'LOAD_DASHBOARD';\nexport const GET_ALL_USERS = 'GET_ALL_USERS';\nexport const GET_ALL_AUTHORITIES = 'GET_ALL_AUTHORITIES';\nexport const GET_ALL_GROUPS = 'GET_ALL_GROUPS';\nexport const GET_ALL_SUB_ADMINS = 'GET_ALL_SUB_ADMINS';\nexport const GET_USER_DETAILS = 'GET_USER_DETAILS';\nexport const GET_SCAN_HISTORY = 'GET_SCAN_HISTORY';\n","import {\n    SET_CURRENT_USER,\n    AUTH_LOADING,\n    SET_MESSAGE,\n} from '../actions/types';\n\nconst isEmpty = require('is-empty');\n\nconst initialState = {\n    isAuthenticated: false,\n    user: {},\n    isLoading: false,\n    message: '',\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case SET_CURRENT_USER:\n            return {\n                ...state,\n                isAuthenticated: !isEmpty(action.payload),\n                user: action.payload\n            };\n\n        case AUTH_LOADING: \n            return {\n                ...state,\n                isLoading: action.payload\n            };\n        case SET_MESSAGE: \n            return {\n                ...state,\n                message: action.payload,\n                isLoading: false,\n            };\n        default: \n            return state;\n    }\n}","import { SET_ERRORS } from '../actions/types';\n\nconst initialState = {};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case SET_ERRORS:\n            // const errors = {};\n            \n            // if (action.payload.validationErrors) {\n            //     action.payload.validationErrors.filter(obj => {\n            //         errors[obj.field] = typeof errors[obj.field] === 'undefined' ? '' : errors[obj.field] += '\\n';\n            //         errors[obj.field] += obj.message;\n\n            //         return null;\n            //     });\n            // }\n\n            // if (action.payload.errorMessage) {\n            //     errors['errorMessage'] = action.payload.errorMessage;\n            // }\n\n            return action.payload;\n            // return errors;\n        default:\n            return state;\n    }\n}","import {\n    USER_LOADING,\n    LOAD_DASHBOARD,\n    GET_ALL_USERS,\n    GET_ALL_AUTHORITIES,\n    GET_ALL_GROUPS,\n    GET_ALL_SUB_ADMINS,\n    GET_USER_PROFILE,\n    GET_USER_DETAILS,\n    GET_SCAN_HISTORY,\n} from '../actions/types';\n\nconst initialState = {\n    isLoading       : false,\n    dashboard       : {},\n    usersList       : {},\n    authoritiesList : {},\n    groupsList      : {},\n    subAdminsList   : {},\n    profile         : {},\n    details         : {},\n    history         : {},\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case LOAD_DASHBOARD:\n            return {\n                ...state,\n                dashboard: action.payload,\n                isLoading: false\n            };\n        case GET_USER_PROFILE:\n            return {\n                ...state,\n                profile: action.payload,\n                isLoading: false\n            };\n        case GET_USER_DETAILS:\n            return {\n                ...state,\n                details: action.payload,\n                isLoading: false\n            };\n        case GET_SCAN_HISTORY:\n            return {\n                ...state,\n                history: action.payload,\n                isLoading: false\n            };\n        case GET_ALL_USERS:\n            return {\n                ...state,\n                usersList: {...action.payload},\n                isLoading: false\n            };\n        case GET_ALL_AUTHORITIES:\n            return {\n                ...state,\n                authoritiesList: {...action.payload},\n                isLoading: false\n            };\n        case GET_ALL_GROUPS:\n            return {\n                ...state,\n                groupsList: {...action.payload},\n                isLoading: false\n            };\n        case GET_ALL_SUB_ADMINS:\n            return {\n                ...state,\n                subAdminsList: {...action.payload},\n                isLoading: false\n            };\n        case USER_LOADING: \n            return {\n                ...state,\n                isLoading: action.payload\n            };\n        default: \n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport authReducer from './authReducer';\nimport errorReducer from './errorReducer';\nimport userReducer from './userReducer';\n\nexport default combineReducers({\n    auth    : authReducer,\n    errors  : errorReducer,\n    user    : userReducer,\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware),\n        // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() // for development stage\n        (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__()) || compose\n    )\n);\n\nexport default store;","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { setErrors } from '../../actions/errorActions';\nimport store from '../../store';\n\nclass ScrollToTop extends React.Component {\n\n    componentDidUpdate(prevProps) {\n        if (\n            this.props.location.pathname !== prevProps.location.pathname\n        ) {\n            window.scrollTo(0, 0);\n            store.dispatch(setErrors({}));\n        }\n    }\n\n    render() {\n        return null;\n    }\n}\n\nexport default withRouter(ScrollToTop);","import {\n    SET_ERRORS,\n} from './types';\n\n\n// Get list of wallets\nexport const setErrors = errors => dispatch => {\n\n    dispatch({\n        type: SET_ERRORS,\n        payload: errors\n    });\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport classnames from 'classnames';\n\n// import Image from 'react-image-webp';\n// import logo from '../../assets/images/logo.png';\n// import logoWebp from '../../assets/images/logo.webp';\n\nclass Navbar extends Component {\n    constructor() {\n        super();\n        this.state = {\n            isTop: true\n        };\n\n        this.isScrollOnTop = this.isScrollOnTop.bind(this);\n    }\n\n    isScrollOnTop() {\n        const isTop = window.scrollY < 10;\n\n        if (isTop !== this.state.isTop) {\n            this.setState({ isTop });\n        }\n    }\n\n    componentDidMount() {\n        // this.isScrollOnTop();\n        window.addEventListener('scroll', this.isScrollOnTop);\n    }\n    \n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.isScrollOnTop);\n    }\n\n    render() {\n        let initialBg  = this.props.initialBg  || 'bg-transparent',\n            scrolledBg = this.props.scrolledBg || 'bg-blue-midnight shadow-sm',\n            expandedBg = this.props.expandedBg || 'bg-blue-space shadow-sm',\n            brandColor = this.props.brandColor || 'text-white';\n\n        return (\n            <nav className={classnames('navbar navbar-default navbar-expand-md fixed-top', {\n                    [initialBg]: !this.props.expanded && this.state.isTop,\n                    [scrolledBg]: !this.props.expanded && !this.state.isTop,\n                    [expandedBg]: this.props.expanded\n                })}\n\n                role=\"navigation\"\n            >\n                <div className=\"container pl-4\">\n                    <Link\n                        to=\"/\"\n                        className={`navbar-brand ${brandColor}`}\n                    >\n                        {/* <Image\n                            src={this.props.logo || logo}\n                            webp={this.props.logoWebp || logoWebp}\n                            className=\"img-fluid float-left\"\n                            alt=\"Logo\"\n                        /> */}\n                    </Link>\n\n                    {this.props.children}\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default Navbar;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Button = ({ onClick, className = 'btn rounded-0', style, type, children, disabled = false, ...others }) => {\n    return (\n        <button\n            onClick={onClick}\n            className={className}\n            style={style}\n            type={type}\n            disabled={disabled}\n            {...others}\n        >\n            {children}\n        </button>\n    );\n};\n\nButton.propTypes = {\n    // onClick: PropTypes.func.isRequired,\n    className: PropTypes.string,\n    children: PropTypes.node.isRequired,\n}\n\nexport default Button;","import React from 'react';\n\n/* Start Font Awesome integration */\n// import { library } from '@fortawesome/fontawesome-svg-core';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { fas } from '@fortawesome/free-solid-svg-icons';\n// import { faSpinner } from '@fortawesome/free-solid-svg-icons'\n\n// library.add(fas);\n/* End Font Awesome integration */\n\nconst Loading = ({ loadingText }) =>\n    <div>\n        {/* <FontAwesomeIcon icon={['fas', 'spinner']} spin fixedWidth /> */}\n        {/* Loading: <FontAwesomeIcon icon=\"spinner\" /> */}\n        {loadingText || 'Loading...'}\n    </div>\n\nexport default Loading;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ButtonWithLoading from '../partials/ButtonWithLoading';\nimport { sendInquiry } from '../../actions/authActions';\nimport classnames from 'classnames';\n\nclass Landing extends Component {\n    constructor() {\n        super();\n        this.state = {\n            message: '',\n            isLoading: false,\n            fields: {\n                name: '',\n                email: '',\n                subject: '',\n                message: '',\n            },\n            errors: {}\n        };\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        const { isLoading, message, } = nextProps.auth;\n\n        this.setState({\n            isLoading,\n            message,\n        });\n    }\n\n    onChange = e => {\n        let { fields } = this.state;\n        fields[e.target.id] = e.target.value;\n\n        this.setState({\n            fields\n        });\n    };\n\n    onSubmit = e => {\n        e.preventDefault();\n\n        if (this.validateForm()) {\n            this.props.sendInquiry(this.state.fields);\n        }\n    };\n\n    validateForm() {\n        let { fields } = this.state;\n        let errors = {};\n        let formIsValid = true;\n\n        Object.keys(fields).forEach((key, index) => {\n            errors[key] = '';\n        });\n\n        if (!fields['name']) {\n            formIsValid = false;\n            errors['name'] += 'Name field is required.';\n        }\n\n        if (!fields['email']) {\n            formIsValid = false;\n            errors['email'] += 'E-mail Address field is required.';\n        }\n\n        if (!fields['subject']) {\n            formIsValid = false;\n            errors['subject'] += 'Subject field is required.';\n        }\n\n        if (!fields['message']) {\n            formIsValid = false;\n            errors['message'] += 'Message field is required.';\n        }\n\n        this.setState({\n            errors\n        });\n\n        return formIsValid;\n    }\n\n    render = () => {\n        const {\n            fields: {\n                name,\n                email,\n                subject,\n                message,\n            },\n            isLoading,\n            errors,\n        } = this.state;\n\n        const rows = [];\n        for (let i = 1; i <= 24; i++) {\n            rows.push((i < 10 ? '0' : '') + i);\n        }\n\n        return (\n            <div className=\"landing\">\n                <div className=\"container h-100\">\n                    <div className=\"row h-100\">\n                        <div className=\"col-md-5 col-lg-7 d-flex align-items-center\">\n                            <div>\n                                <div className=\"h1 mb-0 font-weight-bold\">\n                                    <span className=\"text-orange\">oneTapDev</span>\n                                    <span className=\"text-pale-blue\">();</span>\n                                </div>\n                                <div className=\"h5 font-weight-bold\">\n                                    <span className=\"text-pale-yellow\">weDo</span>\n                                    <span className=\"text-pale-blue\"> = [</span>\n                                    <span className=\"text-neon-green\">\"design\"</span>\n                                    <span className=\"text-pale-blue\">, </span>\n                                    <span className=\"text-neon-green\">\"code\"</span>\n                                    <span className=\"text-pale-blue\">];</span>\n                                </div>\n\n                                <div className=\"h5 my-5 font-weight-bold\">\n                                    <p className=\"mb-1 text-pale-lavender\">&nbsp;// We are full stack!</p>\n                                    <p className=\"mb-1\">\n                                        <span className=\"text-pink\">#import </span>\n                                        <span className=\"text-silver\">BackEnd.Developer</span>\n                                    </p>\n                                    <p className=\"mb-1\">\n                                        <span className=\"text-pink\">#import </span>\n                                        <span className=\"text-silver\">FrontEnd.Developer</span>\n                                    </p>\n                                    <p className=\"mb-1\">\n                                        <span className=\"text-pink\">#import </span>\n                                        <span className=\"text-silver\">iOS.Developer</span>\n                                    </p>\n                                    <p className=\"mb-1\">\n                                        <span className=\"text-pink\">#import </span>\n                                        <span className=\"text-silver\">Android.Developer</span>\n                                    </p>\n                                    <p className=\"mb-1\">\n                                        <span className=\"text-pink\">#import </span>\n                                        <span className=\"text-silver\">UI_UX.Designer</span>\n                                    </p>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-md-7 col-lg-5 pt-md-5\">\n                            <div className=\"bg-space-blue h-100\">\n                                <div className=\"row\">\n                                    <div className=\"col-md-12 d-flex justify-content-start mt-2 ml-3\">\n                                        <div className=\"window-button bg-red\"></div>\n                                        <div className=\"window-button bg-amber\"></div>\n                                        <div className=\"window-button bg-olive-green\"></div>\n                                    </div>\n                                </div>\n                                <div className=\"row mt-2\">\n                                    <div className=\"col-md-12 p-3 d-flex justify-content-start\">\n                                        <div className=\"px-3\">\n                                            {\n                                                rows.map(row => <p key={row} className=\"small text-evening-blue font-weight-bold mb-1\">{row}</p>)\n                                            }\n                                        </div>\n                                        <div className=\"pr-4\" style={{ flex: '1' }}>\n                                            {\n                                                !this.state.message || this.state.message === ''\n                                                    ?\n                                                    <p className=\"text-pale-lavender font-weight-bold mb-0\">\n                                                                &nbsp;/*<br />\n                                                        Tap us for your project<br />\n                                                        by submitting an e-mail<br />\n                                                        &nbsp; */\n                                                    </p>\n                                                    :\n                                                    <p className=\"text-neon-green font-weight-bold mb-0\">\n                                                        &nbsp;/*<br />\n                                                        {this.state.message}<br />\n                                                        &nbsp; */\n                                                    </p>\n                                            }\n\n\n                                            <form noValidate onSubmit={this.onSubmit}>\n                                                <div className=\"form-group mb-3\">\n                                                    <label htmlFor=\"name\" className=\"text-green font-weight-bold mb-0\">&nbsp;// Name</label>\n                                                    <input\n                                                        onChange={this.onChange}\n                                                        value={name}\n                                                        error={errors.name}\n                                                        id=\"name\"\n                                                        type=\"text\"\n                                                        placeholder=\"~ Your name here\"\n                                                        className={classnames('form-control no-outline bg-night-blue text-neon-green font-weight-bold', {\n                                                            'is-invalid': errors.name,\n                                                            'border-night-blue': !errors.name,\n                                                        })}\n                                                    />\n                                                    {errors.name ? errors.name.split('\\n').map((item, i) => <span key={i} className=\"text-danger font-weight-bold small\">{item}<br /></span>) : ''}\n                                                </div>\n\n                                                <div className=\"form-group mb-3\">\n                                                    <label htmlFor=\"email\" className=\"text-green font-weight-bold mb-0\">&nbsp;// E-mail</label>\n                                                    <input\n                                                        onChange={this.onChange}\n                                                        value={email}\n                                                        error={errors.email}\n                                                        id=\"email\"\n                                                        type=\"email\"\n                                                        placeholder=\"~ Your e-mail here\"\n                                                        className={classnames('form-control no-outline bg-night-blue text-neon-green font-weight-bold', {\n                                                            'is-invalid': errors.email,\n                                                            'border-night-blue': !errors.email,\n                                                        })}\n                                                    />\n                                                    {errors.email ? errors.email.split('\\n').map((item, i) => <span key={i} className=\"text-danger font-weight-bold small\">{item}<br /></span>) : ''}\n                                                </div>\n\n                                                <div className=\"form-group mb-3\">\n                                                    <label htmlFor=\"subject\" className=\"text-green font-weight-bold mb-0\">&nbsp;// Subject</label>\n                                                    <input\n                                                        onChange={this.onChange}\n                                                        value={subject}\n                                                        error={errors.subject}\n                                                        id=\"subject\"\n                                                        type=\"text\"\n                                                        placeholder=\"~ Input your e-mail subject here\"\n                                                        className={classnames('form-control no-outline bg-night-blue text-neon-green font-weight-bold', {\n                                                            'is-invalid': errors.subject,\n                                                            'border-night-blue': !errors.subject,\n                                                        })}\n                                                    />\n                                                    {errors.subject ? errors.subject.split('\\n').map((item, i) => <span key={i} className=\"text-danger font-weight-bold small\">{item}<br /></span>) : ''}\n                                                </div>\n\n                                                <div className=\"form-group mb-3\">\n                                                    <label htmlFor=\"message\" className=\"text-green font-weight-bold mb-0\">&nbsp;// Message</label>\n                                                    <textarea\n                                                        onChange={this.onChange}\n                                                        value={message}\n                                                        error={errors.message}\n                                                        id=\"message\"\n                                                        rows=\"4\"\n                                                        placeholder=\"~ Input your message here\"\n                                                        className={classnames('form-control no-outline bg-night-blue text-neon-green font-weight-bold', {\n                                                            'is-invalid': errors.message,\n                                                            'border-night-blue': !errors.message,\n                                                        })}\n                                                    ></textarea>\n                                                    {errors.message ? errors.message.split('\\n').map((item, i) => <span key={i} className=\"text-danger font-weight-bold small\">{item}<br /></span>) : ''}\n                                                </div>\n\n                                                <div className=\"form-group pt-3 d-flex\">\n                                                    <ButtonWithLoading\n                                                        type=\"submit\"\n                                                        className=\"btn btn-sm btn-warning text-dark text-uppercase font-weight-bold px-4 rounded-custom ml-auto\"\n                                                        loadingText=\"Sending...\"\n                                                        isLoading={isLoading}\n                                                    >\n                                                        Send\n                                                </ButtonWithLoading>\n                                                </div>\n                                            </form>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nLanding.propTypes = {\n    sendInquiry: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth,\n    errors: state.errors,\n});\n\nexport default connect(\n    mapStateToProps,\n    {\n        sendInquiry\n    }\n)(Landing);","import React, { Component } from 'react'\n\nclass PageNotFound extends Component {\n    constructor(props) {\n        super(props);\n        this.goBack = this.goBack.bind(this); // i think you are missing this\n    }\n\n    goBack() {\n        this.props.history.goBack();\n    }\n\n    render() {\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\" style={{ height: \"100vh\" }}>\n                    <div className=\"col-md-6 bg-alt text-center d-flex justify-content-center align-items-center\">\n                        <div>\n                            <p className=\"display-3\">404</p>\n                            <h2>Page Not Found</h2>\n                            <p className=\"small\">\n                                The page that you are looking for could not be found.\n                            </p>\n                            <button onClick={this.goBack} className=\"btn btn-gradient font-weight-bold\">Go Back</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default PageNotFound;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport jwt_decode from 'jwt-decode';\nimport setAuthToken from './utils/setAuthToken';\nimport { setCurrentUser, logoutUser } from './actions/authActions';\n\n/*\n * Redux\n */\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n/*\n * Assets\n */\nimport './assets/styles/main.scss';\n\n/* \n * Components\n */\n// import Authorization from './components/auth/Authorization';  \n// import PrivateRoute from './components/auth/PrivateRoute';  \n\nimport ScrollToTop from './components/layouts/ScrollToTop';   \nimport Navbar from './components/layouts/Navbar';   \n\n/*\n * Pages\n */\n// import Login from './components/pages/Login';    \nimport Landing from './components/pages/Landing';    \nimport PageNotFound from './components/errors/PageNotFound';\n\n// Check for token and keep user logged in\nif (localStorage.jwtToken) {\n    // Set auth token header auth\n    const token = localStorage.jwtToken;\n    setAuthToken(token);\n\n    // Decode token and get user info and expiration\n    // const { role, exp } = jwt_decode(token);\n    const { exp } = jwt_decode(token);\n\n    // Set user and isAuthenticated\n    const user = JSON.parse(localStorage.user);\n    store.dispatch(setCurrentUser(user));\n    // console.log(jwt_decode(token))\n\n    // Check for expired token\n    const currentTime = Date.now() / 1000; // to get in milliseconds\n    if (exp < currentTime) {\n        // Logout user\n        store.dispatch(logoutUser());\n\n        // Redirect to login\n        window.location.href = './login';\n    }\n}\n\n\nclass App extends Component {\n    render() {\n        // const SUB_ADMIN = Authorization(['ADMIN', 'SUB_ADMIN']);\n        // const ADMIN = Authorization(['ADMIN']);\n\n        return (\n            <Provider store={store}>\n                <Router>\n                    <ScrollToTop />\n                    <div className=\"App\">\n                        {/* Navbar */}\n                        <Switch>\n                            <Route exact path={['/login']} component={Navbar} /> \n                        </Switch>\n\n                        <div className=\"container-fluid\">\n                            <div className=\"row\">\n\n                                {/* Body */}\n                                <Switch>\n                                    <Route exact path=\"/\" component={Landing} />\n                                    {/* <Route exact path=\"/privacy_policy\" component={PrivacyPolicy} />\n                                    <Route exact path=\"/faq\" component={FAQ} />\n                                    <Route exact path=\"/login\" component={Login} />\n\n                                    <PrivateRoute\n                                        exact path={[\n                                            \"/\",\n                                            \"/dashboard\",\n                                            \"/members\",\n                                            \"/member/:code?\",\n                                            \"/leaders\",\n                                            \"/add_leader\",\n                                            \"/leader/:code?\",\n                                            \"/leader/edit/:code?\",\n                                            \"/history/:code?\",\n                                            \"/ids\",\n                                        ]}\n                                        component={SUB_ADMIN(props => <Panel {...props} target={\"/dashboard\"} />)}\n                                    />\n\n                                    <PrivateRoute\n                                        exact path={[\n                                            \"/groups\",\n                                            \"/sub_admins\",\n                                            \"/add_sub_admin\",\n                                            \"/sub_admin/edit/:code?\",\n                                        ]}\n                                        component={ADMIN(props => <Panel {...props} target={\"/dashboard\"} />)}\n                                    /> */}\n\n                                    <Route path=\"*\" component={PageNotFound} />\n                                </Switch>\n                            </div>\n                        </div>\n                    </div>\n                </Router>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}